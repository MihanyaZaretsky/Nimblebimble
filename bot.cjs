const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ ---
const TELEGRAM_BOT_TOKEN = process.env.BOT_TOKEN || '8312865169:AAHmI2FODLlt4Qcf2rr6MtRbUcB8fGtlLoU';

if (!TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);
const paidUsers = new Map();

// --- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π polling ---
let isPolling = false;
let restartTimeout = null;

function startBot() {
  if (isPolling) {
    console.log('üîÑ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
    return;
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
  isPolling = true;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
  if (restartTimeout) {
    clearTimeout(restartTimeout);
    restartTimeout = null;
  }
  
  // –ü—Ä–æ—Å—Ç–æ–π polling –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  bot.startPolling();
  console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω');
}

function stopBot() {
  if (!isPolling) return;
  
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  isPolling = false;
  bot.stopPolling();
}

// --- –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling ---
bot.on('polling_error', (error) => {
  console.log('üîÑ –û—à–∏–±–∫–∞ polling:', error.message);
  isPolling = false;
  
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
  if (restartTimeout) {
    clearTimeout(restartTimeout);
  }
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (—É–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è)
  restartTimeout = setTimeout(() => {
    if (!isPolling) {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      startBot();
    }
  }, 10000);
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
bot.on("pre_checkout_query", (query) => {
  console.log("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:", query.id);
  bot.answerPreCheckoutQuery(query.id, true).catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ answerPreCheckoutQuery:", error);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
bot.on("message", (msg) => {
  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.text} –æ—Ç ${msg.from.first_name} (ID: ${msg.from.id})`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  if (msg.text === '/start') {
    console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${msg.from.first_name} (ID: ${msg.from.id})`);
    
    const welcomeMessage = `üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nimble Roulette!\n\n` +
      `üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:\n\n` +
      `üí∞ –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å Stars –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!`;
    
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É',
          web_app: { url: 'https://nimblebimble.onrender.com' }
        }
      ]]
    };
    
    bot.sendMessage(msg.chat.id, welcomeMessage, { reply_markup: keyboard })
      .then(() => {
        console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${msg.from.first_name}`);
      })
      .catch(error => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  if (msg.successful_payment) {
    const userId = msg.from.id;
    const payment = msg.successful_payment;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, payment);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    paidUsers.set(userId, {
      chargeId: payment.telegram_payment_charge_id,
      amount: payment.total_amount,
      currency: payment.currency,
      timestamp: Date.now()
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(msg.chat.id, 
      `üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
      `üí∞ –°—É–º–º–∞: ${payment.total_amount / 100} ${payment.currency}\n` +
      `üí≥ ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.telegram_payment_charge_id}\n\n` +
      `–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–≥—Ä—É.`
    ).catch(error => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    });
  }
});

// --- API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è API
const express = require('express');
const cors = require('cors');
const apiApp = express();
const API_PORT = process.env.API_PORT || 3001;

apiApp.use(express.json());
apiApp.use(cors());

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å
apiApp.post("/api/createInvoiceLink", async (req, res) => {
  const { payload, currency, prices } = req.body;
  
  console.log("üîµ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞:", { payload, currency, prices });
  
  if (!payload || !currency || !prices || !(prices[0] && prices[0].amount)) {
    return res
      .status(400)
      .json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã." });
  }
  
  const price = prices[0].amount;
  if (typeof price !== "number" || price <= 0) {
    return res.status(400).json({ success: false, error: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞." });
  }
  
  const title = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${price} Stars`;
  const description = `–ü–æ–∫—É–ø–∫–∞ Stars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${price} –µ–¥–∏–Ω–∏—Ü.`;
  const label = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${price} ${currency}`;
  
  try {
    // –î–ª—è Telegram Stars –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const invoiceLink = await bot.createInvoiceLink(
      title,
      description,
      payload,
      TELEGRAM_BOT_TOKEN, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è Stars
      currency,
      [{ label, amount: price }]
    );
    
    console.log("‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω:", invoiceLink);
    res.json({ success: true, invoiceLink });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
apiApp.get("/api/paymentStatus/:userId", (req, res) => {
  const userId = parseInt(req.params.userId);
  const paymentInfo = paidUsers.get(userId);
  
  res.json({ 
    success: true, 
    hasPaid: !!paymentInfo,
    paymentInfo: paymentInfo || null,
    userId 
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
apiApp.get("/api/balance/:userId", (req, res) => {
  const userId = parseInt(req.params.userId);
  const paymentInfo = paidUsers.get(userId);
  
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏–ª, –¥–∞–µ–º 1000 Stars
  const balance = paymentInfo ? 1000 : 0;
  
  res.json({ 
    success: true, 
    balance,
    userId 
  });
});

// –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞
apiApp.listen(API_PORT, '0.0.0.0', () => {
  console.log(`üîå API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${API_PORT}`);
});

// --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
startBot();
console.log("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω");

// --- Graceful shutdown ---
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  stopBot();
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  stopBot();
  process.exit(0);
}); 