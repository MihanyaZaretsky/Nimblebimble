const express = require("express");
const TelegramBot = require("node-telegram-bot-api");
const cors = require("cors");
const app = express();
const port = process.env.PAYMENT_PORT || 3001;

require("dotenv").config();

const TELEGRAM_BOT_TOKEN = process.env.BOT_TOKEN || '8312865169:AAHmI2FODLlt4Qcf2rr6MtRbUcB8fGtlLoU';
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

// Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
const paidUsers = new Map();

app.use(express.json());
app.use(cors());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("pre_checkout_query", (query) => {
  bot.answerPreCheckoutQuery(query.id, true).catch(() => {
    console.error("answerPreCheckoutQuery failed");
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
bot.on("message", (msg) => {
  if (msg.successful_payment) {
    const userId = msg.from.id;
    paidUsers.set(userId, msg.successful_payment.telegram_payment_charge_id);
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const message = paidUsers.has(userId) ? "–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏" : "–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏";
  bot.sendMessage(chatId, message);
});

// –ö–æ–º–∞–Ω–¥–∞ /refund –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ Stars
bot.onText(/\/refund/, async (msg) => {
  const userId = msg.from.id;
  if (!paidUsers.has(userId)) {
    return bot.sendMessage(
      msg.chat.id,
      "–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–µ—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å."
    );
  }
  
  const chargeId = paidUsers.get(userId);
  try {
    const form = {
      user_id: userId,
      telegram_payment_charge_id: chargeId,
    };
    
    const refundResponse = await bot._request("refundStarPayment", { form });
    
    if (refundResponse) {
      paidUsers.delete(userId);
      bot.sendMessage(msg.chat.id, "–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω.");
    } else {
      bot.sendMessage(msg.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:", error);
    bot.sendMessage(msg.chat.id, "–í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å
app.post("/api/createInvoiceLink", async (req, res) => {
  const { payload, currency, prices } = req.body;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!payload || !currency || !prices || !(prices[0] && prices[0].amount)) {
    return res
      .status(400)
      .json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã." });
  }
  
  const price = prices[0].amount;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
  if (typeof price !== "number" || price <= 0) {
    return res.status(400).json({ success: false, error: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞." });
  }
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã
  const title = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${price} Stars`;
  const description = `–ü–æ–∫—É–ø–∫–∞ Stars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${price} –µ–¥–∏–Ω–∏—Ü.`;
  const label = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${price} ${currency}`;
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –∏—Å–ø–æ–ª—å–∑—É—è Telegram Bot API
    const invoiceLink = await bot.createInvoiceLink(
      title,
      description,
      payload,
      TELEGRAM_BOT_TOKEN,
      currency,
      [{ label, amount: price }]
    );
    
    res.json({ success: true, invoiceLink });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω–≤–æ–π—Å:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get("/api/paymentStatus/:userId", (req, res) => {
  const userId = parseInt(req.params.userId);
  const hasPaid = paidUsers.has(userId);
  
  res.json({ 
    success: true, 
    hasPaid,
    userId 
  });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
app.get("/api/balance/:userId", (req, res) => {
  const userId = parseInt(req.params.userId);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const balance = paidUsers.has(userId) ? 1000 : 0; // –ü—Ä–∏–º–µ—Ä
  
  res.json({ 
    success: true, 
    balance,
    userId 
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.startPolling();

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`üí≥ –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üîó URL: http://localhost:${port}`);
}); 