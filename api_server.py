from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import asyncio
from bot import bot, create_invoice_link

app = FastAPI(title="Nimble Bot API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Web App
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://nimblebimble.onrender.com", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class InvoiceRequest(BaseModel):
    user_id: int
    amount: int
    currency: str = "TON"  # TON –∏–ª–∏ Stars
    description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"

class PaymentStatusRequest(BaseModel):
    user_id: int

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    return {"message": "Nimble Bot API —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@app.post("/api/createInvoiceLink")
async def create_invoice(request: InvoiceRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        print(f"üîµ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: {request}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Stars –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        invoice_link = await create_invoice_link(
            user_id=request.user_id,
            amount=request.amount,
            currency="Stars",  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Stars
            description=request.description
        )
        
        return {
            "success": True,
            "invoice_url": invoice_link,
            "user_id": request.user_id
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/paymentStatus/{user_id}")
async def get_payment_status(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        return {
            "success": True,
            "hasPaid": False,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            "user_id": user_id
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/balance/{user_id}")
async def get_balance(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        return {
            "success": True,
            "balance": 0,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            "user_id": user_id
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")
    uvicorn.run(app, host="0.0.0.0", port=8000) 