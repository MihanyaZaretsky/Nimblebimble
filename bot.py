import asyncio
import logging
import json
import websockets
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', '8312865169:AAHmI2FODLlt4Qcf2rr6MtRbUcB8fGtlLoU')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-vite-app.onrender.com')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
class WebSocketServer:
    def __init__(self):
        self.clients = set()
        self.user_sessions = {}  # user_id -> websocket
    
    async def register(self, websocket, user_id):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        self.user_sessions[user_id] = websocket
        logger.info(f"üîó WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def unregister(self, websocket, user_id):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.discard(websocket)
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    async def send_to_user(self, user_id, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.user_sessions:
            try:
                await self.user_sessions[user_id].send(json.dumps(data))
                logger.info(f"üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                await self.unregister(self.user_sessions[user_id], user_id)

# –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
ws_server = WebSocketServer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    logger.info(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")
    
    welcome_text = f"""üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Nimble Roulette*, {user.first_name}! üé∞

üé≤ –ì–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É!

üéÆ *Nimble Roulette* - —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –∏–≥—Ä–∞ —Å Telegram Stars!
üíé –ü–æ–∫—É–ø–∞–π—Ç–µ Stars, –¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ!
‚ö° –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!"""

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Web App
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üéÆ –û—Ç–∫—Ä—ã—Ç—å Nimble Roulette",
        web_app=WebAppInfo(url=WEBAPP_URL)
    ))
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App
@dp.message(lambda message: message.web_app_data is not None)
async def web_app_data_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    user = message.from_user
    logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}")
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
        web_app_data = message.web_app_data.data
        data = json.loads(web_app_data)
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç Web App: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        action = data.get('action')
        
        if action == 'connect_websocket':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket
            await message.answer("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
            
        elif action == 'place_bet':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
            bet_amount = data.get('amount', 0)
            await message.answer(f"üí∞ –°—Ç–∞–≤–∫–∞ {bet_amount} Stars –ø—Ä–∏–Ω—è—Ç–∞! –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ WebSocket –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await ws_server.send_to_user(user.id, {
                'action': 'process_bet',
                'user_id': user.id,
                'amount': bet_amount
            })
            
        elif action == 'buy_stars':
            # –ü–æ–∫—É–ø–∫–∞ Stars
            amount = data.get('amount', 0)
            await message.answer(f"üíé –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É {amount} Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        elif action == 'withdraw_stars':
            # –í—ã–≤–æ–¥ Stars
            amount = data.get('amount', 0)
            await message.answer(f"üí∏ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            
        else:
            await message.answer("üéâ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
            
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()
    logger.info(f"üîò Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.first_name}")

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def websocket_handler(websocket, path):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    user_id = None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        async for message in websocket:
            try:
                data = json.loads(message)
                user_id = data.get('user_id')
                
                if user_id:
                    await ws_server.register(websocket, user_id)
                    logger.info(f"üîó WebSocket –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    await websocket.send(json.dumps({
                        'action': 'connected',
                        'user_id': user_id,
                        'status': 'success'
                    }))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    async for msg in websocket:
                        try:
                            msg_data = json.loads(msg)
                            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_data}")
                            
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                            action = msg_data.get('action')
                            
                            if action == 'spin_roulette':
                                # –°–∏–º—É–ª—è—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
                                result = await simulate_roulette(msg_data)
                                await websocket.send(json.dumps(result))
                                
                            elif action == 'get_balance':
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                                balance = await get_user_balance(user_id)
                                await websocket.send(json.dumps({
                                    'action': 'balance_response',
                                    'balance': balance
                                }))
                                
                        except json.JSONDecodeError:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            
                else:
                    logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω user_id –≤ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–∏")
                    break
                    
            except json.JSONDecodeError:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–≤–æ–≥–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è")
                break
                
    except websockets.exceptions.ConnectionClosed:
        logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
    finally:
        if user_id:
            await ws_server.unregister(websocket, user_id)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
async def simulate_roulette(data):
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏"""
    import random
    
    bet_amount = data.get('amount', 10)
    result = random.randint(0, 36)
    win = random.random() > 0.6  # 40% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
    
    if win:
        win_amount = int(bet_amount * random.uniform(1.5, 3.0))
        return {
            'action': 'roulette_result',
            'result': result,
            'win': True,
            'win_amount': win_amount,
            'message': f"üéâ –í—ã–∏–≥—Ä—ã—à! +{win_amount} Stars"
        }
    else:
        return {
            'action': 'roulette_result',
            'result': result,
            'win': False,
            'lost_amount': bet_amount,
            'message': "üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        }

async def get_user_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    return 100

# –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
async def start_websocket_server():
    """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        server = await websockets.serve(websocket_handler, "localhost", 8765)
        logger.info("üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8765")
        await server.wait_closed()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Nimble Roulette Bot –Ω–∞ aiogram 3...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    websocket_task = asyncio.create_task(start_websocket_server())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
