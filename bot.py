import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (—Ö–∞—Ä–¥–∫–æ–¥–∏–º –¥–ª—è Railway)
BOT_TOKEN = "7771822556:AAHWZD6D_AMH0bT51ygacsoEEwQmPzJn4xI"

# URL –≤–∞—à–µ–≥–æ Web App –Ω–∞ Render
WEBAPP_URL = "https://nimblebimble.onrender.com"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars
async def create_invoice_link(user_id: int, amount: int, currency: str = "Stars", description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Stars —á–µ—Ä–µ–∑ Telegram API"""
    try:
        import aiohttp
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
        order_id = f"{user_id}_{int(asyncio.get_event_loop().time())}"
        
        # –°–æ–∑–¥–∞–µ–º payload –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ Django
        payload = f"{order_id}&&&{amount}"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
        data = {
            "title": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} {currency}",
            "payload": payload,
            "provider_token": "",  # –î–ª—è Stars –Ω–µ –Ω—É–∂–µ–Ω provider token
            "currency": "XTR",  # Telegram Stars –∏—Å–ø–æ–ª—å–∑—É—é—Ç XTR
            "prices": [{"label": f"{amount} {currency}", "amount": int(amount)}]
        }
        
        print(f"üîµ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å: {data}")
        
        # –í—ã–∑—ã–≤–∞–µ–º Telegram API –Ω–∞–ø—Ä—è–º—É—é
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/createInvoiceLink"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data) as resp:
                result = await resp.json()
                
                if result.get("ok"):
                    invoice_link = result["result"]
                    print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω: {invoice_link}")
                    return invoice_link
                else:
                    error_msg = result.get("description", "Unknown error")
                    print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {error_msg}")
                    raise Exception(f"Telegram API error: {error_msg}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        raise e

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Web App
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É",
                web_app=types.WebAppInfo(url=WEBAPP_URL)
            )
        ]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    
    print(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} (ID: {user_id})")
    
    welcome_text = f"""
üéâ –ü—Ä–∏–≤–µ—Ç, {user_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Nimble Roulette! üé∞

üéÆ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É:
    """
    
    try:
        await message.answer(
            welcome_text,
            reply_markup=get_main_keyboard()
        )
        print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        print(f"üîµ Pre-checkout query: {pre_checkout_query.id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        print(f"‚úÖ Pre-checkout query –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ pre-checkout query: {e}")
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
@dp.message(lambda message: message.successful_payment is not None)
async def process_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        user_name = message.from_user.first_name
        user_id = message.from_user.id
        payment = message.successful_payment
        
        print(f"üí∞ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_name} (ID: {user_id})")
        print(f"üì¶ –ü–ª–∞—Ç–µ–∂: {payment.invoice_payload}")
        print(f"üí≥ –°—É–º–º–∞: {payment.total_amount} {payment.currency}")
        
        # –ü–∞—Ä—Å–∏–º payload –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ Django
        try:
            order_id = payment.invoice_payload.split("&&&")[0]
            amount = payment.invoice_payload.split("&&&")[1]
            
            print(f"üÜî Order ID: {order_id}")
            print(f"üí∞ Amount: {amount}")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
                f"üí∞ –°—É–º–º–∞: {amount} Stars\n"
                f"üéÆ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!"
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ payload: {e}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_message(message: types.Message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {message.text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Web App
    await cmd_start(message)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Python –±–æ—Ç–∞...")
    print(f"üîë –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
    print(f"üåê Web App URL: {WEBAPP_URL}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
        bot_info = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
        import uvicorn
        from fastapi import FastAPI
        
        app = FastAPI()
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –¥–ª—è Web App
        from fastapi.middleware.cors import CORSMiddleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["https://nimblebimble.onrender.com", "http://localhost:3000"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        @app.get("/")
        async def root():
            return {"status": "Bot is running", "bot": bot_info.username}
        
        @app.get("/health")
        async def health():
            return {"status": "healthy"}
        
        # API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–æ–≤
        from pydantic import BaseModel
        
        class InvoiceRequest(BaseModel):
            user_id: int
            amount: int
            currency: str = "TON"
            description: str = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        
        @app.post("/api/createInvoiceLink")
        async def create_invoice(request: InvoiceRequest):
            """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars"""
            try:
                print(f"üîµ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞: {request}")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                invoice_link = await create_invoice_link(
                    user_id=request.user_id,
                    amount=request.amount,
                    currency="Stars",
                    description=request.description
                )
                
                return {
                    "success": True,
                    "invoice_url": invoice_link,
                    "user_id": request.user_id
                }
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
                return {
                    "success": False,
                    "error": str(e)
                }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        import asyncio
        
        async def run_bot():
            await dp.start_polling(bot)
        
        async def run_server():
            config = uvicorn.Config(app, host="0.0.0.0", port=8000)
            server = uvicorn.Server(config)
            await server.serve()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await asyncio.gather(
            run_bot(),
            run_server()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 